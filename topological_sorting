#include<bits/stdc++.h>
using namespace std;
#define N 100005
vector<int> adj[N];
#define pb push_back
void add_edge(int x,int y){
    // as the graph is directed
    adj[x].pb(y);
}
list<int> ans;
void dfs_helper(int src,map<int,bool> &visited){
    visited[src]=true;

    for(auto neigh :adj[src]){
        if(!visited[neigh]){
            dfs_helper(neigh,visited);
        }  
    }
    //when we go back from visiting all the neighbours of src node then push that node in front
    ans.push_front(src);
}
void dfs(int n){
    map<int,bool>visited;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            dfs_helper(i,visited);
        }
    }
}
int main(){
    add_edge(1,2);
    add_edge(1,3);
    add_edge(2,4);
    add_edge(3,5);
    add_edge(4,5);
    dfs(5);
    for(auto x:ans){
        cout<<x<<" ";
    }

    return 0;
}
